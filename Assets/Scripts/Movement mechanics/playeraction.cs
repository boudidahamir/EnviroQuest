//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Movement mechanics/playeraction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Playeraction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Playeraction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""playeraction"",
    ""maps"": [
        {
            ""name"": ""mvm"",
            ""id"": ""471d1f34-58f2-456c-815a-90b9472fd99b"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""30e52043-6c6b-4e32-a5f0-f02905a40952"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""74acdd4e-c040-4221-b89a-58bc2cc88bd4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""219e9d18-e03b-4358-982e-c64e9c5a0203"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Button"",
                    ""id"": ""8174dc59-6513-4273-97b0-5a08a88be93b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74bbd3e5-55ac-4649-9d02-23c2264f0f45"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b558c4cc-d1e7-49f4-9c84-0a138839db59"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""53a54d69-8c8e-49f3-9995-64dcb93f274e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2fd10003-5a79-4293-b1e9-16670079cc8c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""77154d56-5fce-47cc-957c-80d63cdc5a4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0530c989-ae13-423f-aa8d-81ead8bc2c8f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1f75ff2a-a130-4102-a957-1be32436b3c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2b62a463-7b47-4cb8-b407-7d185319dbcd"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""pickup"",
            ""id"": ""40c0231a-c659-4176-8d47-1398791ab6ca"",
            ""actions"": [
                {
                    ""name"": ""pick"",
                    ""type"": ""Button"",
                    ""id"": ""f364fd76-643c-4049-ab97-276296c21267"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f0e3743-fa9e-4c36-968d-4783394daaf9"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""pick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // mvm
        m_mvm = asset.FindActionMap("mvm", throwIfNotFound: true);
        m_mvm_Movement = m_mvm.FindAction("Movement", throwIfNotFound: true);
        m_mvm_Jump = m_mvm.FindAction("Jump", throwIfNotFound: true);
        m_mvm_Look = m_mvm.FindAction("Look", throwIfNotFound: true);
        m_mvm_Speed = m_mvm.FindAction("Speed", throwIfNotFound: true);
        // pickup
        m_pickup = asset.FindActionMap("pickup", throwIfNotFound: true);
        m_pickup_pick = m_pickup.FindAction("pick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // mvm
    private readonly InputActionMap m_mvm;
    private List<IMvmActions> m_MvmActionsCallbackInterfaces = new List<IMvmActions>();
    private readonly InputAction m_mvm_Movement;
    private readonly InputAction m_mvm_Jump;
    private readonly InputAction m_mvm_Look;
    private readonly InputAction m_mvm_Speed;
    public struct MvmActions
    {
        private @Playeraction m_Wrapper;
        public MvmActions(@Playeraction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_mvm_Movement;
        public InputAction @Jump => m_Wrapper.m_mvm_Jump;
        public InputAction @Look => m_Wrapper.m_mvm_Look;
        public InputAction @Speed => m_Wrapper.m_mvm_Speed;
        public InputActionMap Get() { return m_Wrapper.m_mvm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MvmActions set) { return set.Get(); }
        public void AddCallbacks(IMvmActions instance)
        {
            if (instance == null || m_Wrapper.m_MvmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MvmActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Speed.started += instance.OnSpeed;
            @Speed.performed += instance.OnSpeed;
            @Speed.canceled += instance.OnSpeed;
        }

        private void UnregisterCallbacks(IMvmActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Speed.started -= instance.OnSpeed;
            @Speed.performed -= instance.OnSpeed;
            @Speed.canceled -= instance.OnSpeed;
        }

        public void RemoveCallbacks(IMvmActions instance)
        {
            if (m_Wrapper.m_MvmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMvmActions instance)
        {
            foreach (var item in m_Wrapper.m_MvmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MvmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MvmActions @mvm => new MvmActions(this);

    // pickup
    private readonly InputActionMap m_pickup;
    private List<IPickupActions> m_PickupActionsCallbackInterfaces = new List<IPickupActions>();
    private readonly InputAction m_pickup_pick;
    public struct PickupActions
    {
        private @Playeraction m_Wrapper;
        public PickupActions(@Playeraction wrapper) { m_Wrapper = wrapper; }
        public InputAction @pick => m_Wrapper.m_pickup_pick;
        public InputActionMap Get() { return m_Wrapper.m_pickup; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PickupActions set) { return set.Get(); }
        public void AddCallbacks(IPickupActions instance)
        {
            if (instance == null || m_Wrapper.m_PickupActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PickupActionsCallbackInterfaces.Add(instance);
            @pick.started += instance.OnPick;
            @pick.performed += instance.OnPick;
            @pick.canceled += instance.OnPick;
        }

        private void UnregisterCallbacks(IPickupActions instance)
        {
            @pick.started -= instance.OnPick;
            @pick.performed -= instance.OnPick;
            @pick.canceled -= instance.OnPick;
        }

        public void RemoveCallbacks(IPickupActions instance)
        {
            if (m_Wrapper.m_PickupActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPickupActions instance)
        {
            foreach (var item in m_Wrapper.m_PickupActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PickupActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PickupActions @pickup => new PickupActions(this);
    public interface IMvmActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSpeed(InputAction.CallbackContext context);
    }
    public interface IPickupActions
    {
        void OnPick(InputAction.CallbackContext context);
    }
}
